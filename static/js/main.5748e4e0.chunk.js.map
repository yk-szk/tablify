{"version":3,"sources":["App.tsx","Utils.tsx","index.tsx"],"names":["App","useState","wasm","setWasm","tableRows","setTableRows","template","setTemplate","output","setOutput","useEffect","then","module","console","log","err","error","message","className","rows","value","onChange","event","target","name","type","accept","e","files","length","reader","FileReader","readAsArrayBuffer","onload","buf","result","rendered","render","Uint8Array","html","loadFile","ReactHtmlParser","id","readOnly","title","disabled","onClick","text","navigator","clipboard","writeText","ReactDOM","StrictMode","document","getElementById"],"mappings":"6PA2GeA,MA1Ef,WAAgB,IAAD,EACWC,mBAA4B,MADvC,mBACNC,EADM,KACAC,EADA,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGmBJ,mBA9BZ,8fA2BP,mBAGNK,EAHM,KAGIC,EAHJ,OAIeN,mBAAS,IAJxB,mBAINO,EAJM,KAIEC,EAJF,KA0Cb,OArCAC,qBAAU,WACR,IACE,6BAAkBC,MAAK,SAACC,GACtBT,EAAQS,GACRC,QAAQC,IAAI,yCAEd,MAAOC,GACPF,QAAQG,MAAR,sDAA6DD,EAAIE,QAAjE,SAED,IA6BD,sBAAKC,UAAU,MAAf,UACE,iCACE,2CAEF,gCACE,0CACA,mBAAGA,UAAU,QAAb,wCACA,0BAAUA,UAAU,OAAOC,KAAM,EAAGC,MAAOd,EAAUe,SAZ3D,SAA0BC,GACxBf,EAAYe,EAAMC,OAAOH,QAW4DI,KAAK,aACtF,8CACA,mBAAGN,UAAU,QAAb,iDACA,uBAAOO,KAAK,OAAOC,OAAO,aAAaL,SAAU,SAACM,GAAD,OAtCvD,SAAkBC,GAEhB,GADAf,QAAQC,IAAIc,GACRA,EAAMC,OAAS,EAAG,CACpB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,kBAAkBJ,EAAM,IAC/BE,EAAOG,OAAS,WACd,GAAa,OAAT/B,EAAe,CACjB,IAAMgC,EAAMJ,EAAOK,OACnB,IACE,IACMC,EAAWlC,EAAKmC,OADC,6FACsB,IAAIC,WAAWJ,GAAMN,EAAM,GAAGJ,MAAM,GACjFnB,EAAa+B,GACb,IAAMG,EAAOrC,EAAKmC,OAAO/B,EAAU,IAAIgC,WAAWJ,GAAMN,EAAM,GAAGJ,MAAM,GACvEX,QAAQC,IAAIyB,GACZ9B,EAAU8B,GACV,MAAOvB,GACPH,QAAQG,MAAMA,OAsB2CwB,CAASb,EAAEJ,OAAOK,aAEjF,gCACE,gDACA,gCACE,gCACGa,IAAgBrC,UAIvB,gCACE,wCACA,0BAAUc,UAAU,OAAOC,KAAM,EAAGuB,GAAG,SAAStB,MAAOZ,EAAQmC,UAAQ,IACvE,wBAAQC,MAAM,+BACZC,SAAqB,KAAXrC,EACVsC,QAAS,SAACxB,GAAD,OClGSyB,EDkGcvC,OCjGpCwC,UAAUC,WACZD,UAAUC,UAAUC,UAAUH,IAF3B,IAAqBA,GDgGpB,yBE9FRI,IAASd,OACP,cAAC,IAAMe,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5748e4e0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport './App.css';\nimport { toClipboard } from './Utils';\n\ntype ModuleType = typeof import('tablify');\nconst default_template = `<style>\n    p {\n        text-indent: 1em;\n        padding: 0;\n        margin-bottom: 0 !important;\n    }\n\n    address {\n        font-style: normal;\n        margin: 1em 0 !important;\n    }\n</style>\n<table>\n    <tbody>\n        {%- for row in rows %}\n        <tr>\n            <th align=\"center\" width=\"30%\">\n                {{row[0]}}\n            </th>\n            <td width=\"70%\">\n                {{row[1]}}\n            </td>\n        </tr>\n        {%- endfor %}\n    </tbody>\n</table>`;\n\nfunction App() {\n  const [wasm, setWasm] = useState<ModuleType | null>(null);\n  const [tableRows, setTableRows] = useState(\"\");\n  const [template, setTemplate] = useState(default_template);\n  const [output, setOutput] = useState(\"\");\n  useEffect(() => {\n    try {\n      import('tablify').then((module: ModuleType) => {\n        setWasm(module);\n        console.log('wasm has been loaded successfully.')\n      });\n    } catch (err) {\n      console.error(`Unexpected error in loading wasm. [Message: ${err.message}]`);\n    }\n  }, [])\n  function loadFile(files: FileList) {\n    console.log(files);\n    if (files.length > 0) {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(files[0]);\n      reader.onload = function () {\n        if (wasm !== null) {\n          const buf = reader.result as ArrayBuffer;\n          try {\n            const table_template = \"{%- for row in rows %}<tr>{%- for e in row %}<td>{{e}}</td>{%- endfor %}</tr>{%- endfor %}\";\n            const rendered = wasm.render(table_template, new Uint8Array(buf), files[0].name, false);\n            setTableRows(rendered);\n            const html = wasm.render(template, new Uint8Array(buf), files[0].name, false);\n            console.log(html);\n            setOutput(html);\n          } catch (error) {\n            console.error(error);\n          }\n        }\n      }\n    }\n  }\n\n  function onTemplateChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    setTemplate(event.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Tablify</h1>\n      </header>\n      <div>\n        <h2>Template</h2>\n        <p className=\"usage\">Set Jinja2/Django template</p>\n        <textarea className=\"code\" rows={5} value={template} onChange={onTemplateChange} name=\"template\"></textarea >\n        <h2>Tabular data</h2>\n        <p className=\"usage\">Choose tabular file (.csv or .xlsx)</p>\n        <input type=\"file\" accept=\".xlsx,.csv\" onChange={(e: any) => loadFile(e.target.files)}></input>\n      </div>\n      <div>\n        <h2>Input contents</h2>\n        <table>\n          <tbody>\n            {ReactHtmlParser(tableRows)}\n          </tbody>\n        </table>\n      </div>\n      <div>\n        <h2>Output</h2>\n        <textarea className=\"code\" rows={5} id=\"output\" value={output} readOnly></textarea>\n        <button title=\"Copy output to the clipboard\"\n          disabled={output === ''}\n          onClick={(event) => toClipboard(output)}>Copy</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/**\n * Copy text to clipboard\n */\nexport function toClipboard(text: string) {\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(text);\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}