{"version":3,"sources":["App.tsx","Utils.tsx","index.tsx"],"names":["default_template","App","useState","wasm","setWasm","inputContent","setInputContent","template","setTemplate","output","setOutput","useEffect","param","URL","window","location","href","searchParams","has","console","log","decoded","decompressFromEncodedURIComponent","get","then","module","err","error","message","className","rows","value","onChange","event","target","length","compressed","compressToEncodedURIComponent","new_uri","pathname","split","pop","history","replaceState","name","type","accept","e","files","reader","FileReader","readAsArrayBuffer","onload","buf","result","rendered","render","Uint8Array","html","loadFile","ReactHtmlParser","id","readOnly","title","disabled","onClick","text","navigator","clipboard","writeText","blob","Blob","link","document","createElement","createObjectURL","download","click","remove","downloadAsHtml","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.091bd62e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { compressToEncodedURIComponent, decompressFromEncodedURIComponent } from 'lz-string';\nimport './App.css';\nimport { toClipboard, downloadAsHtml } from './Utils';\n\ntype ModuleType = typeof import('tablify');\nlet default_template = `<style>\ntr:nth-child(odd) {\n    background: #f7f7ff;\n}\n</style>\n<table>\n<tbody>\n    {%- for row in rows %}\n    <tr>\n        {%- for e in row %}\n        <td>{{e}}</td>\n        {%- endfor %}\n    </tr>\n    {%- endfor %}\n</tbody>\n</table>`;\n\nfunction App() {\n  const [wasm, setWasm] = useState<ModuleType | null>(null);\n  const [inputContent, setInputContent] = useState(\"\");\n  const [template, setTemplate] = useState(default_template);\n  const [output, setOutput] = useState(\"\");\n  useEffect(() => {\n    const param = new URL(window.location.href).searchParams;\n    if (param.has(\"t\")) {\n      console.log(\"Set template from the URL\")\n      const decoded = decompressFromEncodedURIComponent(param.get(\"t\") as string);\n      if (decoded !== null) {\n        default_template = decoded;\n        setTemplate(default_template);\n      }\n    }\n  }, [])\n  useEffect(() => {\n    try {\n      import('tablify').then((module: ModuleType) => {\n        setWasm(module);\n        console.log('wasm has been loaded successfully.')\n      });\n    } catch (err) {\n      console.error(`Unexpected error in loading wasm. [Message: ${err.message}]`);\n    }\n  }, [])\n  function loadFile(files: FileList) {\n    console.log(files);\n    if (files.length > 0) {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(files[0]);\n      reader.onload = function () {\n        if (wasm !== null) {\n          const buf = reader.result as ArrayBuffer;\n          try {\n            const table_template = \"<table><tbody>{%- for row in rows %}<tr>{%- for e in row %}<td>{{e}}</td>{%- endfor %}</tr>{%- endfor %}</tbody></table>\";\n            const rendered = wasm.render(table_template, new Uint8Array(buf), files[0].name, false);\n            setInputContent(rendered);\n            const html = wasm.render(template, new Uint8Array(buf), files[0].name, false);\n            setOutput(html);\n          } catch (error) {\n            console.error(error);\n            setInputContent('<p class=\"error\">' + error + '</p>');\n            setOutput(\"\")\n          }\n        }\n      }\n    }\n  }\n\n  function onTemplateChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    setTemplate(event.target.value);\n    if (event.target.value.length > 0) {\n      const compressed = compressToEncodedURIComponent(event.target.value);\n      const new_uri = (window.location.pathname.split('/').pop() + '?t=' + compressed);\n      window.history.replaceState({}, '', new_uri);\n    } else {\n      window.history.replaceState({}, '', window.location.pathname);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Tablify</h1>\n      </header>\n      <div>\n        <h2>Template</h2>\n        <p className=\"usage\">Set Jinja2/Django template</p>\n        <textarea className=\"code\" rows={5} value={template} onChange={onTemplateChange} name=\"template\"></textarea >\n        <h2>Tabular data</h2>\n        <p className=\"usage\">Choose tabular file (.csv or .xlsx)</p>\n        <input type=\"file\" accept=\".xlsx,.csv\" onChange={(e: any) => loadFile(e.target.files)}></input>\n      </div>\n      <div>\n        <h2>Input contents</h2>\n        {ReactHtmlParser(inputContent)}\n      </div>\n      <div>\n        <h2>Output</h2>\n        <textarea className=\"code\" rows={5} id=\"output\" value={output} readOnly></textarea>\n        <button title=\"Copy output to the clipboard\"\n          disabled={output === ''}\n          onClick={(event) => toClipboard(output)}>Copy</button>\n        <button title=\"Save output as a file\"\n          disabled={output === ''}\n          onClick={(event) => downloadAsHtml(output, \"table.html\")}>Save</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/**\n * Save text as a text file.\n */\n export function downloadAsHtml(text: string, name: string) {\n  const blob = new Blob([text], { type: 'text/html' });\n  var link = document.createElement('a');\n  link.href = URL.createObjectURL(blob);\n  link.download = name;\n  link.click();\n  link.remove();\n}\n\n/**\n * Copy text to clipboard\n */\nexport function toClipboard(text: string) {\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(text);\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}